#!/bin/bash
# -*- mode: sh -*-

#*BeginPNNLCopyright*********************************************************
#
# $HeadURL$
# $Id$
#
#***********************************************************EndPNNLCopyright*

# set -x

scriptPath0="${BASH_SOURCE[0]}" # works when script is sourced (unlike $0)
scriptPath=$(readlink -f "${scriptPath0}")
scriptCmd=${scriptPath##*/} # cf. $(basename ...)
scriptDir=${scriptPath%/*}  # cf. $(dirname ...)

#****************************************************************************

opt_ubench='iozone'
opt_out_fnm=''

ior_path="${HOME}/app/ior/ior.git/MYINSTALL/bin/ior"
iozone_path="${HOME}/app/iozone/iozone/src/current/iozone"

min_task=1
max_task=552 #240(seapearl), 552(bluesky)

max_hour=1

#****************************************************************************
# Parse arguments
#****************************************************************************

die()
{
    cat <<EOF 1>&2
${scriptCmd}: $*
Use '${scriptCmd} -h' for usage.
EOF
    exit 1
}

usage()
{
    cat <<EOF
Usage: ${scriptCmd} [--ubench iozone|iozone-slurm|ior] ...
EOF

    usage_iozone()
    
    exit 0
}

usage_iozone()
{
    cat <<EOF
IOZone notes (cf. 'iozone_w_opts' and 'ior_r_opts')
- Each round test is a pair of tests, a "write" test and then a "read"
  test.
- Each test includes two lines of output. Note that an individual test
  includes both read and write tests, e.g., a must always includes a
  write to populate file.
- Parser selects a subset of the IOZone output:
  - wr-1,rd: write new file (incl all metadata costs); then read (sequential)
  - rnd/w,r: random write; then random read
EOF
}



#-----------------------------------------------------------
# optional arguments
#-----------------------------------------------------------
while [[ $# -gt 0 ]] ; do

    arg="$1"
    shift # past argument
    
    case "${arg}" in
    -h | --help )
        usage
        ;;

    --ubench )
        opt_ubench="$1"
        shift # past value
        ;;

    -o | --output )
        opt_out_fnm="$1"
        shift # past value
        ;;
          
    * ) # unknown option
        die "unknown option '$1'"
        ;;
    esac
done

#-----------------------------------------------------------
# required args
#-----------------------------------------------------------

#if [[ -z ${xxx} ]] ; then
#    die "no CFGProf path"
#fi


#****************************************************************************
# 
#****************************************************************************

# cf. ~/1modsim-tools-svn/palm/trunk/palm-task/palm-task-genfp

my_hostname=${HOSTNAME}

fs_path=$(readlink -f .)

out_fnm="${scriptCmd}-$(date --iso-8601=minutes)-${opt_ubench}.log"
[[ -n ${opt_out_fnm} ]] && out_fnm="${opt_out_fnm}"

if [[ ! ${opt_ubench} =~ iozone|iozone-slurm|ior ]] ; then
    die "invalid benchmark '${opt_ubench}'"
fi


#****************************************************************************
# 
#****************************************************************************

declare -A host2tasksPerNode=( [bluesky.pnl.gov]=24 \
                   [seapearl.pnl.gov]=20 )

# sets "mpi_launcher"
mk_mpi_launcher()
{
    local n_task=$1

    local n_task_p_node=${host2tasksPerNode[${my_hostname}]}
    local n_node=$( ceil_div ${n_task} ${n_task_p_node} )

    local all_opt="--exclusive -t 00:20:00"
    
    case "${my_hostname}" in
    bluesky* )
        # --ntasks-per-node=${n_task_p_node}
        mpi_launcher="srun -N ${n_node} -n ${n_task} ${all_opt}"
        ;;
    seapearl* )
        mpi_launcher="srun -N ${n_node} -p ivy ${all_opt} mpiexec -n ${n_task}"
        ;;
    * ) # unknown option
        die "unknown launcher for '${my_hostname}'"
        ;;
    esac
}


ceil_div() {
    local num=$1
    local div=$2
    echo $(( (num + div - 1) / div ))
}


kb2_to_mb10()
{
    local bw=$1
    echo "(${bw} * 1024) / (10^6)" | bc -l
}


kb2_to_mbpp()
{
    local bw=$1
    local n_ps=$2
    echo "(${bw} * 1024) / (10^6 * ${n_ps})" | bc -l
}


#****************************************************************************
# 
#****************************************************************************

re_tasks="tasks[:blank:]*: ([[:digit:]]+)"
re_bw="^Max (Read|Write): *([0-9.]+) MiB/sec \(([0-9.]+) MB/sec"

parse_ior()
{
    local n_match=0
    while IFS= read line; do
    #echo ${line}
    #if ((n_match >= 2)) ; then
    #    continue
    if [[ ${line} =~ ${re_tasks} ]] ; then
        local ranks=${BASH_REMATCH[1]}
        ((n_match++))
    elif [[ ${line} =~ ${re_bw} ]] ; then
        local type=${BASH_REMATCH[1]}
        local bw2=${BASH_REMATCH[2]} # MiB/s
        local bw=${BASH_REMATCH[3]}  # MB/s
        ((n_match++))
    fi
    done
    printf "  %5s %3d: %8.1f MB/s; %8.1f MiB/s\n" ${type} ${ranks} ${bw} ${bw2}
}


re_ioz_x="Children see throughput for"
re_ioz_y="[[:blank:]]+= +([0-9.]+) kB/sec"
re_wr="${re_ioz_x} +([0-9]+) initial writers${re_ioz_y}"
re_rd="${re_ioz_x} +([0-9]+) readers${re_ioz_y}"
re_rnd_rd="${re_ioz_x} +([0-9]+) random readers${re_ioz_y}"
re_rnd_wr="${re_ioz_x} +([0-9]+) random writers${re_ioz_y}"

parse_iozone()
{
    local type=$1
    local n_match=0
    while IFS= read line; do
    #echo ${line}
    #if ((n_match >= 3)) ; then
    #    continue
    if [[ ${line} =~ ${re_wr} ]] ; then
        local ranks=${BASH_REMATCH[1]}
        local wr_bw2=${BASH_REMATCH[2]} # KiB/s all ps
        local wr_bw=$(kb2_to_mb10 ${wr_bw2}) # MB/s
        local wr_bwpp=$(kb2_to_mbpp ${wr_bw2} ${ranks})
        ((n_match++))
    elif [[ ${line} =~ ${re_rd} ]] ; then
        local ranks=${BASH_REMATCH[1]}
        local rd_bw2=${BASH_REMATCH[2]} # KiB/s all ps
        local rd_bw=$(kb2_to_mb10 ${rd_bw2}) # MB/s
        local rd_bwpp=$(kb2_to_mbpp ${rd_bw2} ${ranks})
        ((n_match++))
    elif [[ ${line} =~ ${re_rnd_rd} ]] ; then
        local ranks=${BASH_REMATCH[1]}
        local rnd_rd_bw2=${BASH_REMATCH[2]} # KiB/s all ps
        local rnd_rd_bw=$(kb2_to_mb10 ${rnd_rd_bw2}) # MB/s
        local rnd_rd_bwpp=$(kb2_to_mbpp ${rnd_rd_bw2} ${ranks})
        ((n_match++))
    elif [[ ${line} =~ ${re_rnd_wr} ]] ; then
        local ranks=${BASH_REMATCH[1]}
        local rnd_wr_bw2=${BASH_REMATCH[2]} # KiB/s all ps
        local rnd_wr_bw=$(kb2_to_mb10 ${rnd_wr_bw2}) # MB/s
        local rnd_wr_bwpp=$(kb2_to_mbpp ${rnd_wr_bw2} ${ranks})
        ((n_match++))
    fi
    done

    # wr-1/rd: initial write; then sequential read
    printf "   %5s %3d wr-1,rd: %9.1f MB/s (%7.2f/ps) %9.1f MB/s (%7.2f/ps)\n" \
       ${type} ${ranks} ${wr_bw} ${wr_bwpp} ${rd_bw} ${rd_bwpp}

    # rnd/w,r: random write; then random read
    printf "   %5s %3d rnd/w,r: %9.1f MB/s (%7.2f/ps) %9.1f MB/s (%7.2f/ps)\n" \
       ${type} ${ranks} ${rnd_wr_bw} ${rnd_wr_bwpp} ${rnd_rd_bw} ${rnd_rd_bwpp}
}


#****************************************************************************

ior_w_opts="-F -a POSIX -w -s 1 -b 256m -t  1m -i 1 -vv" # -e
ior_r_opts="-F -a POSIX -r -s 1 -b 256m -t 16k -i 1 -vv"


iozone_w_opts="-i 0      -i 2 -s 1g -r  1m -+r -t"
iozone_r_opts="-i 0 -i 1 -i 2 -s 1g -r 16k -+r -t"
# -i: test selection (must always includ -i 0 to populate file)
# -s: file size, -r: record size
# -+r: use fsync
# -t: throughput
# -I: direct I/O; bypass buffer cache

dat_fnm_stem="io.dat"
dat_fnm_path="${fs_path%/}/${dat_fnm_stem}" # strip trailing /


do_ior()
{
    local date_str=$(date --iso-8601=minutes)

    printf -- "- ${date_str}\n" >> "${out_fnm}"

    #----------------------------------------
    # Write tests
    #----------------------------------------

    printf -- "- ${date_str}: write"
    for (( n_task = min_task; n_task <= max_task; n_task *= 2 )) ; do
        printf " ${n_task}"
        mk_mpi_launcher ${n_task}
        local cmd="${mpi_launcher} ${ior_path} ${ior_w_opts} -o ${dat_fnm_path}"
        printf "\n${cmd}\n"
        ${cmd}  | parse_ior >> "${out_fnm}"
        sleep 10
    done

    #----------------------------------------
    # Read tests (first create pristine data)
    #----------------------------------------

    # N.B.: without fsyncs (-Y), ior may exit without writing all data
    mk_mpi_launcher ${max_task}
    ${mpi_launcher} ${ior_path} ${ior_w_opts} -Y -k -o ${dat_fnm_path} > /dev/null

    printf "; read"
    for (( n_task = min_task; n_task <= max_task; n_task *= 2 )) ; do
    printf " ${n_task}"
    mk_mpi_launcher ${n_task}
    local cmd="${mpi_launcher} ${ior_path} ${ior_r_opts} -k -o ${dat_fnm_path}"
    #printf "\n${cmd}\n"
    ${cmd} | parse_ior >> "${out_fnm}"
    sleep 10
    done
    printf "\n"

    \rm -f "${dat_fnm_path}".*
}


do_iozone()
{
    local date_str=$(date --iso-8601=minutes)

    printf -- "- ${date_str}\n" >> "${out_fnm}"

    #----------------------------------------
    # 
    #----------------------------------------

    printf -- "- ${date_str}: "
    for (( n_task = min_task; n_task <= max_task; n_task *= 2 )) ; do
        # Write test
        printf " ${n_task} (wr"
        local cmd="${iozone_path} ${iozone_w_opts} ${n_task}"
        #printf "\n${cmd}\n"
        ${cmd} | parse_iozone "write" >> "${out_fnm}"
        sleep 10

        # Read test
        printf "/rd)"
        local cmd="${iozone_path} ${iozone_r_opts} ${n_task}"
        #printf "\n${cmd}\n"
        ${cmd} | parse_iozone "read" >> "${out_fnm}"
        sleep 10
    done

    printf "\n"
}

#****************************************************************************

((hour_sec = 60 * 60))

do_ior_loop()
{
    printf "* ior: ${ior_path}\n" | tee -a "${out_fnm}"
    printf "* ior write: ${ior_w_opts}\n" | tee -a "${out_fnm}"
    printf "* ior read : ${ior_r_opts}\n" | tee -a "${out_fnm}"
    printf "* hostname (slurm): ${my_hostname}\n" | tee -a "${out_fnm}"
    printf "* file system (slurm): ${fs_path} (${dat_fnm_path})\n" | tee -a "${out_fnm}"
    
    for (( hour = 1; hour <= max_hour; hour++ )) ; do
    do_ior
    sleep ${hour_sec}
    done
}


do_iozone_loop()
{
    printf "* iozone: ${iozone_path}\n" | tee -a "${out_fnm}"
    printf "* iozone write: ${iozone_w_opts}\n" | tee -a "${out_fnm}"
    printf "* iozone read : ${iozone_r_opts}\n" | tee -a "${out_fnm}"
    printf "* hostname (local): ${my_hostname}\n" | tee -a "${out_fnm}"
    printf "* file system (local): ${fs_path}\n" | tee -a "${out_fnm}"

    usage_iozone() | tee -a "${out_fnm}"
    
    for (( hour = 1; hour <= max_hour; hour++ )) ; do
    do_iozone
    sleep ${hour_sec}
    done
}


do_iozone_slurm()
{
    # FIXME: Currently assumes *read* test
    # FIXME: Re-defining!
    local iozone_r_opts="-i 0 -i 1 -i 2 -s 128m -r 16k -+r -t"

    local srun_launcher="srun -N 1 -n 1 --exclusive"
    if [[ ${my_hostname} =~ seapearl ]] ; then
    srun_launcher+=" -p ivy" # needs --exclusive!
    fi

    local n_task_p_node=${host2tasksPerNode[${my_hostname}]}
    local n_node=$( ceil_div ${max_task} ${n_task_p_node} )
    
    #----------------------------------------

    printf "* iozone: ${iozone_path}\n" | tee -a "${out_fnm}"
    #printf "* iozone write: ${iozone_w_opts}\n" | tee -a "${out_fnm}"
    printf "* iozone read : ${iozone_r_opts}\n" | tee -a "${out_fnm}"
    printf "* hostname (slurm): ${my_hostname}\n" | tee -a "${out_fnm}"
    printf "* file system (slurm): ${fs_path}\n" | tee -a "${out_fnm}"
    printf "* max tasks: ${max_task}, nodes: ${n_node}\n" | tee -a "${out_fnm}"

    local dir_work="run-iozone-node"
    local log_fnm="iozone.log"

    for (( i_node = 1; i_node <= n_node; i_node++ )) ; do
    printf -v mydir "${fs_path}/${dir_work}%03d" ${i_node}
    \mkdir -p "${mydir}"
    local cmd="${srun_launcher} --chdir=${mydir} --output=${mydir}/${log_fnm} ${iozone_path} ${iozone_r_opts} ${n_task_p_node}"
        #printf "${cmd}\n"
        ${cmd} &
    done

    wait

    for x in "${fs_path}"/${dir_work}*/${log_fnm} ; do
    cat ${x} | parse_iozone "read" >> "${out_fnm}"
    done
}

# watch --interval=3600 <me>

# at now + 1 hour -m -f ~/scheduledTask.sh
# at 06:00 -m -f ~/scheduledTask.sh

#****************************************************************************

printf "" > "${out_fnm}"

if [[ ${opt_ubench} = iozone ]] ; then
    do_iozone_loop
elif [[ ${opt_ubench} = iozone-slurm ]] ; then
    do_iozone_slurm
elif [[ ${opt_ubench} = ior ]] ; then
    do_ior_loop
fi
